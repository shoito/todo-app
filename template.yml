AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for TODO App
Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - prod
      - stag
      - dev
  DynamoDBEndpoint:
    Type: String
    Default: !Sub https://dynamodb.${AWS::Region}.amazonaws.com/
  TableName:
    Type: String
    Default: todos
Globals:
  Function:
    Timeout: 15
    Runtime: python3.6
    MemorySize: 256
    Environment:
      Variables:
        DEFAULT_REGION: !Ref AWS::Region
        TABLE_NAME: !Ref TodosTable
        DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint
Resources:
  ShowFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Stage}-get-todos
      CodeUri: ./
      Handler: todos.show.lambda_handler
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        Api:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: GET
            Cors: true
  CreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Stage}-create-todos
      CodeUri: ./
      Handler: todos.create.lambda_handler
      Policies: AmazonDynamoDBFullAccess
      Events:
        Api:
          Type: Api
          Properties:
            Path: /todos
            Method: POST
            Cors: true
  UpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Stage}-update-todos
      CodeUri: ./
      Handler: todos.update.lambda_handler
      Policies: AmazonDynamoDBFullAccess
      Events:
        Api:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: PUT
            Cors: true
  DeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Stage}-delete-todos
      CodeUri: ./
      Handler: todos.delete.lambda_handler
      Policies: AmazonDynamoDBFullAccess
      Events:
        Api:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: DELETE
            Cors: true
  QueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Stage}-query-todos
      CodeUri: ./
      Handler: todos.query.lambda_handler
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        Api:
          Type: Api
          Properties:
            Path: /todos
            Method: GET
            Cors: true
  TodosTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub ${Stage}_${TableName}
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
#        - AttributeName: due_date
#          AttributeType: S
        - AttributeName: todo_status
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: todo_status-index
          KeySchema:
            - AttributeName: todo_status
              KeyType: HASH
          Projection:
              ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
  TodoApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      DefinitionUri: swagger.yml
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: TodoApi
    Properties:
      Name: todo-api-key
      Enabled: true
      StageKeys:
        - RestApiId:
            Ref: TodoApi
          StageName: !Ref Stage
  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: TodoApi
    Properties:
      ApiStages:
      - ApiId: !Ref TodoApi
        Stage: !Sub TodoApi${Stage}Stage
      Throttle:
        BurstLimit: 100
        RateLimit: 100
      UsagePlanName: todo-api-usage-plan
  ApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - ApiKey
      - ApiUsagePlan
    Properties :
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan
Outputs:
  ApiEndpoint:
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}