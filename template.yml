AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for TODO App
Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - prod
      - stg
      - dev
  DynamoDBEndpoint:
    Type: String
    Default: https://dynamodb.ap-northeast-1.amazonaws.com/
  TableName:
    Type: String
    Default: todos
Globals:
  Function:
    Timeout: 15
    Runtime: python3.6
    MemorySize: 128
    Environment:
      Variables:
        DEFAULT_REGION: !Ref AWS::Region
        TABLE_NAME: !Ref TodosTable
        DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint
Outputs:
  ApiEndpoint:
    Value: !Sub https://${TodoApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
Resources:
  ShowFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Stage}-get-todos
      CodeUri: ./
      Handler: todos.show.lambda_handler
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        Api:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: GET
            RestApiId: !Ref TodoApi
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: DynamoDBGet
              Effect: Allow
              Action: dynamodb:GetItem
              Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TodosTable}
  CreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Stage}-create-todos
      CodeUri: ./
      Handler: todos.create.lambda_handler
      Policies: AmazonDynamoDBFullAccess
      Events:
        Api:
          Type: Api
          Properties:
            Path: /todos
            Method: POST
            RestApiId: !Ref TodoApi
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: DynamoDBCreate
              Effect: Allow
              Action: dynamodb:PutItem
              Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TodosTable}
  UpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Stage}-update-todos
      CodeUri: ./
      Handler: todos.update.lambda_handler
      Policies: AmazonDynamoDBFullAccess
      Events:
        Api:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: PUT
            RestApiId: !Ref TodoApi
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: DynamoDBUpdate
              Effect: Allow
              Action: dynamodb:UpdateItem
              Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TodosTable}
  DeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Stage}-delete-todos
      CodeUri: ./
      Handler: todos.delete.lambda_handler
      Policies: AmazonDynamoDBFullAccess
      Events:
        Api:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: DELETE
            RestApiId: !Ref TodoApi
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: DynamoDBDelete
              Effect: Allow
              Action: dynamodb:DeleteItem
              Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TodosTable}
  QueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Stage}-query-todos
      CodeUri: ./
      Handler: todos.query.lambda_handler
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        Api:
          Type: Api
          Properties:
            Path: /todos
            Method: GET
            RestApiId: !Ref TodoApi
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: DynamoDBQuery
              Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TodosTable}
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TodosTable}/index/todo_status-index
  TodosTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub ${Stage}_${TableName}
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
#        - AttributeName: due_date
#          AttributeType: S
        - AttributeName: todo_status
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: todo_status-index
          KeySchema:
            - AttributeName: todo_status
              KeyType: HASH
          Projection:
              ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
  TodoApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Variables:
        Stage: !Ref Stage
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        securityDefinitions:
          TodoApiKey:
            type: apiKey
            name: x-api-key
            in: header
        paths:
          "/todos":
            post:
              security:
                - TodoApiKey: []
              consumes:
                - application/json
              produces:
                - application/json
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateFunction.Arn}/invocations
                passthroughBehavior: when_no_match
              responses: {}
            get:
              security:
                - TodoApiKey: []
              consumes:
                - application/json
              produces:
                - application/json
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueryFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: |
                    {
                      #foreach($key in $input.params().querystring.keySet())
                      "$key": "$util.escapeJavaScript($input.params().querystring.get($key))" #if($foreach.hasNext),#end
                      #end
                    }
              responses: {}
            options:
              summary: CORS support
              description: |
                Enable CORS by returning correct headers
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: |
                    200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Credentials:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Credentials: "'false'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE,PATCH'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        {}
          "/todos/{id}":
            get:
              security:
                - TodoApiKey: []
              consumes:
                - application/json
              produces:
                - application/json
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShowFunction.Arn}/invocations
                passthroughBehavior: when_no_match
              responses: {}
            put:
              security:
                - TodoApiKey: []
              consumes:
                - application/json
              produces:
                - application/json
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateFunction.Arn}/invocations
                passthroughBehavior: when_no_match
              responses: {}
            delete:
              security:
                - TodoApiKey: []
              consumes:
                - application/json
              produces:
                - application/json
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteFunction.Arn}/invocations
                passthroughBehavior: when_no_match
              responses: {}
            options:
              summary: CORS support
              description: |
                Enable CORS by returning correct headers
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: |
                    200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Credentials:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Credentials: "'false'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE,PATCH'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        {}
  TodoApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - TodoApi
      - TodoApiStage
    Properties:
      Enabled: true
      StageKeys:
        - RestApiId: !Ref TodoApi
          StageName: !Ref Stage
      Name: !Sub ${Stage}-todo-apikey
  TodoApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - TodoApi
      - TodoApiStage
    Properties:
      ApiStages:
        - ApiId: !Ref TodoApi
          Stage: !Ref Stage
      UsagePlanName: !Sub ${Stage}-todo-usageplan
  ApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - TodoApiKey
      - TodoApiUsagePlan
    Properties :
      KeyId: !Ref TodoApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref TodoApiUsagePlan